/**
 * Twitter bot that tweets out AL East standings via https://erikberg.com/
 *
 * @type {exports}
 */

// Coming from standings.js
var https = require('https');
var fs = require('fs');
var moment = require('moment-timezone');
var sprintf = require('sprintf').sprintf;
var zlib = require('zlib');

// Replace with your access token
var ACCESS_TOKEN = '4b22e306-f608-43f5-8f96-d4dcb7e08733';

// Replace with your bot name and email/website to contact if there is a problem
// e.g., "mybot/0.1 (https://erikberg.com/)"
var USER_AGENT = 'ALEastBot (aleastbot@gmail.com)';

// Set time zone to use for output
var TIME_ZONE = 'America/New_York';



var Bot = require('./bot')
  , config1 = require('../config1');

var bot = new Bot(config1);

console.log('RTD2: Running.');

//get date string for today's date (e.g. '2011-01-01')
function datestring () {
  var d = new Date(Date.now() - 5*60*60*1000);  //est timezone
  return d.getUTCFullYear()   + '-'
     +  (d.getUTCMonth() + 1) + '-'
     +   d.getDate();
};

// Twitter API limit is 15 requests per 15 minutes
setInterval(function() {

  /**
  bot.twit.get('followers/ids', function(err, reply) {
    if(err) return handleError(err)
    console.log('\n# followers:' + reply.ids.length.toString());
  });
   */

  // Here we need to get standings data and then tweet it
  // Set the API method, format, and any parameters
  var host   = 'erikberg.com';
    var sport  = 'mlb';
    var method = 'standings';
    var id     = '20150412';
    var format = 'json';

    var url;
    var default_opts;
    var chunks;
    var buffer;
    var encoding;

    url = buildURL(host, sport, method, id, format);

    default_opts = {
        'host': host,
        'path': url,
        'headers': {
            'Accept-Encoding': 'gzip',
            'Authorization': 'Bearer ' + ACCESS_TOKEN,
            'User-Agent': USER_AGENT
        }
    };

    https.get(default_opts, function (res) {
        chunks = [];
        res.on('data', function (chunk) {
            chunks.push(chunk);
        });
        res.on('end', function () {
            if (res.statusCode !== 200) {
                // handle error...
                console.warn("Server did not return a 200 response!\n" + chunks.join(''));
                process.exit(1);
            }
            encoding = res.headers['content-encoding'];
            if (encoding === 'gzip') {
                buffer = Buffer.concat(chunks);
                zlib.gunzip(buffer, function (err, decoded) {
                    if (err) {
                        console.warn("Error trying to decompress data: " + err.message);
                        process.exit(1);
                    }
                    var standings = JSON.parse(decoded);
                    var tweetContent = "";

                    standings.standing.forEach(function (standing) {
                        if (standing.conference == "AL" && standing.division == "E") {
                            tweetContent += standing.ordinal_rank + " " + standing.first_name + " " + standing.last_name;
                            if (standing.streak_type == "win") {
                                tweetContent += " (W-";
                            } else {
                                tweetContent += " (L-";
                            }
                            tweetContent += standing.streak_total + ")\n";
                        }
                    });

                    bot.tweet(tweetContent, function (err, reply) {
                        if(err) return handleError(err);
                        console.log('\nTweet: ' + (reply ? reply.text : reply));
                    });
                });
            } else {
                var standings = JSON.parse(chunks.join(''));
                var tweetContent = "";

                standings.standing.forEach(function (standing) {
                    if (standing.conference == "AL" && standing.division == "E") {
                        tweetContent += standing.ordinal_rank + " " + standing.first_name + " " + standing.last_name;
                        if (standing.streak_type == "win") {
                            tweetContent += " (W-";
                        } else {
                            tweetContent += " (L-";
                        }
                        tweetContent += standing.streak_total + ")\n";
                    }
                });

                bot.tweet(tweetContent, function (err, reply) {
                    if(err) return handleError(err);
                    console.log('\nTweet: ' + (reply ? reply.text : reply));
                });
            }
        });
    }).on('error', function (err) {
        console.warn("Error trying to contact server: " + err.message);
        process.exit(1);
    });

}, 10000);

function handleError(err) {
  console.error('response status:', err.statusCode);
  console.error('data:', err.data);
}

// See https://erikberg.com/api/methods Request URL Convention for
// an explanation
function buildURL(host, sport, method, id, format) {
    var ary = [sport, method, id];
    var path;
    var url;

    path = ary.filter(function (element) {
        return element !== undefined;
    }).join('/');
    url = 'https://' + host + '/' + path + '.' + format;

    return url;
}
